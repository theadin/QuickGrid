@page "/QuickGridServerRenderingPage"
@using CsvHelper
@using Microsoft.AspNetCore.Components.QuickGrid
@using QuickGrid.Client.Models
@using System.Text
@using System.Globalization
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
<h3>QuickGrid Server</h3>

<div><button @onclick="ExportData">Export</button></div>

<div>Filter: <InputText @bind-Value="FilterText" /></div>
<div class="grid" tabindex="-1">
    @* <QuickGrid Items="@products.AsQueryable()" Pagination="@pagination"> *@
    <QuickGrid ItemsProvider="productsProvider" Pagination="@pagination">
        <PropertyColumn Title="ID" Property="@(c => c.event_id)" />
        <PropertyColumn Property="@(c => c.state)" />
        <PropertyColumn Property="@(c => c.city)" />
        @* <PropertyColumn Title="Company" Property="@(c => c.recalling_firm)" /> *@
        <PropertyColumn Title="Company" Property="@(c => c.recalling_firm)" Sortable="true" Class="company-name">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="countryFilter" @bind:event="oninput" placeholder="Company name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.status)" />
    </QuickGrid>

    <Paginator State="@pagination"></Paginator>
</div>

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

@code {
    List<Result> products = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    GridItemsProvider<Result>? productsProvider;
    string FilterText { get; set; } = "";
    string countryFilter { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        //var result = await Http.GetFromJsonAsync<FoodRecallQueryResult>(url);
        productsProvider = async req =>
        {
            var url = NavManager.GetUriWithQueryParameters("https://api.fda.gov/food/enforcement.json", 
                new Dictionary<string, object?>
                    {
                        { "skip", req.StartIndex },
                        { "limit", req.Count },
                        { "search", FilterText },
                    });
            FoodRecallQueryResult? response = await Http.GetFromJsonAsync<FoodRecallQueryResult>(url);
            return GridItemsProviderResult.From(items: response!.results, totalItemCount: response!.meta!.results!.total);
        };
        //products = result!.results.ToList();
       
    }










    async Task ExportData()
    {
        var csvStr = await GetCsvString();
        byte[] byteArray = Encoding.UTF8.GetBytes(csvStr);
        MemoryStream stream = new MemoryStream(byteArray);
        using var streamRef = new DotNetStreamReference(stream: stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", "file.csv", streamRef);
    }
    private async Task<string> GetCsvString()
    {
        string dataCsv;
        using (var writer = new StringWriter())
        using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture, true))
        {

            var url = NavManager.GetUriWithQueryParameters("https://api.fda.gov/food/enforcement.json", 
                new Dictionary<string, object?>
                    {
                        { "skip", 0 },
                        { "limit", 100 },
                    });
            FoodRecallQueryResult? response = await Http.GetFromJsonAsync<FoodRecallQueryResult>(url);

            var records = response!.results;
            csv.WriteRecords(records);
            dataCsv = writer.ToString();
        }
        return dataCsv;
    }
}